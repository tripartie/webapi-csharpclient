/* 
 * Tripartie Web API
 *
 * This document describes all use cases offered by the Tripartie Web API.<br /><br /> The Tripartie Web API allows you to easily create Transaction templates.<br /> A Transaction template allows a User (the Buyer) to safely initiate a Transaction pre-configured by another User (the Seller).<br /> This allows you to add a Secured Payment button on your website pages.<br /><br /> To facilitate working with the Web API, we built libraries for common development environment:<br/> <ul class=\"bullet\">   <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tripartie/webapi-jsclient\">Javascript</a></li> </ul> <br/> You're reading the documentation for version 1.0 of the Web API.<br/> Go to version <select id=\"version-switcher\"></select> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tripartie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TripartieWebAPI.CSharpClient.Client;
using TripartieWebAPI.CSharpClient.Model;

namespace TripartieWebAPI.CSharpClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionTemplatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch
        /// </summary>
        /// <remarks>
        /// Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <returns>ModelTransactionTemplate</returns>
        ModelTransactionTemplate Fetch (string externalId = default(string), int? tripartieId = default(int?));

        /// <summary>
        /// Fetch
        /// </summary>
        /// <remarks>
        /// Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <returns>ApiResponse of ModelTransactionTemplate</returns>
        ApiResponse<ModelTransactionTemplate> FetchWithHttpInfo (string externalId = default(string), int? tripartieId = default(int?));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <returns>ModelTransactionTemplate</returns>
        ModelTransactionTemplate Create (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <returns>ApiResponse of ModelTransactionTemplate</returns>
        ApiResponse<ModelTransactionTemplate> CreateWithHttpInfo (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetch
        /// </summary>
        /// <remarks>
        /// Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelTransactionTemplate</returns>
        System.Threading.Tasks.Task<ModelTransactionTemplate> FetchAsync (string externalId = default(string), int? tripartieId = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetch
        /// </summary>
        /// <remarks>
        /// Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelTransactionTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelTransactionTemplate>> FetchWithHttpInfoAsync (string externalId = default(string), int? tripartieId = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelTransactionTemplate</returns>
        System.Threading.Tasks.Task<ModelTransactionTemplate> CreateAsync (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </remarks>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelTransactionTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelTransactionTemplate>> CreateWithHttpInfoAsync (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionTemplatesApi : ITransactionTemplatesApi
    {
        private TripartieWebAPI.CSharpClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionTemplatesApi(String basePath)
        {
            this.Configuration = new TripartieWebAPI.CSharpClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TripartieWebAPI.CSharpClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTemplatesApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransactionTemplatesApi()
        {
            this.Configuration = TripartieWebAPI.CSharpClient.Client.Configuration.Default;

            ExceptionFactory = TripartieWebAPI.CSharpClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionTemplatesApi(TripartieWebAPI.CSharpClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TripartieWebAPI.CSharpClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TripartieWebAPI.CSharpClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TripartieWebAPI.CSharpClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TripartieWebAPI.CSharpClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetch Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <returns>ModelTransactionTemplate</returns>
        public ModelTransactionTemplate Fetch (string externalId = default(string), int? tripartieId = default(int?))
        {
             ApiResponse<ModelTransactionTemplate> localVarResponse = FetchWithHttpInfo(externalId, tripartieId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <returns>ApiResponse of ModelTransactionTemplate</returns>
        public ApiResponse<ModelTransactionTemplate> FetchWithHttpInfo (string externalId = default(string), int? tripartieId = default(int?))
        {

            var localVarPath = "/api/web/transaction-templates/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external-id", externalId)); // query parameter
            if (tripartieId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tripartie-id", tripartieId)); // query parameter

            // authentication (ClientIdAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client-id", this.Configuration.GetApiKeyWithPrefix("client-id")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Fetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransactionTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelTransactionTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransactionTemplate)));
        }

        /// <summary>
        /// Fetch Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelTransactionTemplate</returns>
        public async System.Threading.Tasks.Task<ModelTransactionTemplate> FetchAsync (string externalId = default(string), int? tripartieId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ModelTransactionTemplate> localVarResponse = await FetchWithHttpInfoAsync(externalId, tripartieId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch Fetch a Transaction template by its External ID or Tripartie ID.&lt;br /&gt; You MUST provide either &lt;code&gt;external-id&lt;/code&gt; or &lt;code&gt;tripartie-id&lt;/code&gt;, but not both. 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">The Transaction template&#39;s External ID. (optional)</param>
        /// <param name="tripartieId">The Transaction template&#39;s Tripartie ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelTransactionTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelTransactionTemplate>> FetchWithHttpInfoAsync (string externalId = default(string), int? tripartieId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/web/transaction-templates/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external-id", externalId)); // query parameter
            if (tripartieId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tripartie-id", tripartieId)); // query parameter

            // authentication (ClientIdAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client-id", this.Configuration.GetApiKeyWithPrefix("client-id")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Fetch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransactionTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelTransactionTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransactionTemplate)));
        }

        /// <summary>
        /// Create Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <returns>ModelTransactionTemplate</returns>
        public ModelTransactionTemplate Create (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false)
        {
             ApiResponse<ModelTransactionTemplate> localVarResponse = CreateWithHttpInfo(requestCreateTransactionTemplate, dryRun);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <returns>ApiResponse of ModelTransactionTemplate</returns>
        public ApiResponse<ModelTransactionTemplate> CreateWithHttpInfo (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false)
        {
            // verify the required parameter 'requestCreateTransactionTemplate' is set
            if (requestCreateTransactionTemplate == null)
                throw new ApiException(400, "Missing required parameter 'requestCreateTransactionTemplate' when calling TransactionTemplatesApi->Create");

            var localVarPath = "/api/web/transaction-templates/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestCreateTransactionTemplate != null && requestCreateTransactionTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestCreateTransactionTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestCreateTransactionTemplate; // byte array
            }
            
            if (dryRun == true) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry-run", 1)); // query parameter

            // authentication (ClientIdAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client-id", this.Configuration.GetApiKeyWithPrefix("client-id")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransactionTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelTransactionTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransactionTemplate)));
        }

        /// <summary>
        /// Create Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelTransactionTemplate</returns>
        public async System.Threading.Tasks.Task<ModelTransactionTemplate> CreateAsync (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ModelTransactionTemplate> localVarResponse = await CreateWithHttpInfoAsync(requestCreateTransactionTemplate, dryRun, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Create a Transaction template.&lt;br /&gt; You MUST provide either sellerExternalId or sellerTripartieId but not both 
        /// </summary>
        /// <exception cref="TripartieWebAPI.CSharpClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestCreateTransactionTemplate"></param>
        /// <param name="dryRun">Do a dry-run? (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelTransactionTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelTransactionTemplate>> CreateWithHttpInfoAsync (RequestCreateTransactionTemplate requestCreateTransactionTemplate, bool dryRun = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'requestCreateTransactionTemplate' is set
            if (requestCreateTransactionTemplate == null)
                throw new ApiException(400, "Missing required parameter 'requestCreateTransactionTemplate' when calling TransactionTemplatesApi->Create");

            var localVarPath = "/api/web/transaction-templates/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestCreateTransactionTemplate != null && requestCreateTransactionTemplate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestCreateTransactionTemplate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestCreateTransactionTemplate; // byte array
            }
            
            if (dryRun == true) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dry-run", 1)); // query parameter

            // authentication (ClientIdAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client-id", this.Configuration.GetApiKeyWithPrefix("client-id")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransactionTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelTransactionTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransactionTemplate)));
        }

    }
}
